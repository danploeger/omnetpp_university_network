[General]
network = exercise7DSL
sim-time-limit = 200s 

repeat = 1
**.networkConfiguratorModule = "" 
#Thruputmeter for taking measurements
**.ppp[*].numInputHooks = 1 
**.ppp[*].inputHook[0].typename = "ThruputMeter"
**.ppp[*].inputHook[0].maxInterval = 1s 
**.ppp[*].inputHook[0].batchSize = 10000 
**.ppp[*].inputHook[0].**.vector-recording = true 

**.vector-recording = false 



# TCP apps
#The model communicates with the server in sessions.
**.client[*].numTcpApps = 1 # on the client there is only one TCPapp running
**.client[*].tcpApp[*].typename = "TCPBasicClientApp" 
**.client[*].tcpApp[*].localAddress = ""
**.client[*].tcpApp[*].localPort = -1 # negative means listen on all ports (?)
**.client[*].tcpApp[*].connectAddress = "server" #Symbolic Adress of modul the clients connect
**.client[*].tcpApp[*].connectPort = 80 # client sends to port 80

**.client[*].tcpApp[*].startTime = 0s
**.client[*].tcpApp[*].numRequestsPerSession = 1 
**.client[*].tcpApp[*].idleInterval = exponential(30s) #TASK: user reads content and then starts new session
#TASK: the content the user downloads is exponentially distributed
#?: in client server setting request comes from client, reply from server.
#There is no replyLength to be set at server so maybe i have to set it here...
**.client[*].tcpApp[*].requestLength =  exponential(150KiB)
**.client[*].tcpApp[*].replyLength =  exponential(150KiB)#The replies i get are exp.dist aka the content downloaded
**.client[*].tcpApp[*].thinkTime = 0s # time user thinks between next request, really necessary since 
                                         #there is only one request per session? But Simulation asks for it if i dont assign value here.
**.client[*].tcpApp[*].reconnectInterval = 30s # if connection breaks,then wait interval
#Hints
**tcpApp[*].dataTransferMode = "object"

#Server Settings
**.server.numTcpApps = 1
**.server.tcpApp[*].typename = "TCPGenericSrvApp"
**.server.tcpApp[*].localAddress = ""
**.server.tcpApp[*].localPort = 80  #Server listens on port 80
**.server.tcpApp[*].replyDelay = 0 # server answers immediately


# TCP Settings, reihenfolge ist offenbar wichtig
**.client*.tcpType = "TCP"
**.server*.tcpType = "TCP"
**.tcp.tcpAlgorithmClass = "TCPNewReno"
#TASK:TODO: Connections have an upper bound on congestion window 

**.tcp.advertisedWindow = 14*this.mss #receivers buffer size in MSS;is adv. at the beginning to sender
                                # for calculating congestion window
**.tcp.mss = 1000             # TASK:maximale größe eines tcp segments
**.tcp.increasedIWEnabled = true #Increase initial congestion window
**.tcp.delayedAcksEnabled = true
**.tcp.nagleEnabled = true
**.tcp.sendQueueClass = default
**.tcp.receiveQueueClass = default
**.tcp.timestampSupport = true
**.tcp.windowScalingSupport = false

#Router/Client/Server Settings
#The routers currently support only IP packets containing TCP segments with a Maximum
#Maximum Segment Size (MSS) of 1000 Byte 
#MTU auf networklayer +40Byte TCP+ IP header 
**.ppp[*].queueType = "DropTailQueue" #All ppp-modules have droptail queue

# 40 ip packets regardless of their size, so MTU must not be set;ppp pdus=frames 
#->routers accept only 40 if one ip = 1 frame   (inet-manual 4.4 PPPInterface module )
**.accessNet[*].accessRouter.ppp[*].queue.frameCapacity = 40
**.backboneNet[*].backboneRouter.ppp[*].queue.frameCapacity= 40
**.gateway.ppp[*].queue.frameCapacity = 40
#**.ppp[*].ppp.mtu = 1040B  


##UDP settings - not implemented properly yet