[General]
network = University
sim-time-limit= 5405s # 90min + warmup
warmup-period = 5s
repeat =10
## Vector and scalar recording settings
**.thruputMeter.**.vector-recording = true
**.udpApp[*].**.vector-recording = true
**.udpApp[*].rcvdPkLifetime.result-recording-modes = all
**.tcpApp[*].**.vector-recording = true

#Thruputmeter for taking measurements
**.ppp[*].numInputHooks =1
**.ppp[*].inputHook[*].typename="ThruputMeter"
**.ppp[*].inputHook[*].maxInterval =1s
**.ppp[*].inputHook[*].batchSize =10000
**.ppp[*].inputHook[*].**.vector-recording=true

**.ppp[*].numOutputHooks =1
**.ppp[*].outputHook[*].typename="ThruputMeter"
**.ppp[*].outputHook[*].maxInterval =1s
**.ppp[*].outputHook[*].batchSize =10000
**.ppp[*].outputHook[*].**.vector-recording=true

**.eth[*].numInputHooks = 1
**.eth[*].inputHook[*].typename="ThruputMeter"
**.eth[*].inputHook[*].maxInterval = 1s
**.eth[*].inputHook[*].batchSize = 10000
**.eth[*].inputHook[*].**.vector-recording=true

**.eth[*].numOutputHooks = 1
**.eth[*].outputHook[*].typename="ThruputMeter"
**.eth[*].outputHook[*].maxInterval = 1s
**.eth[*].outputHook[*].batchSize = 10000
**.eth[*].outputHook[*].**.vector-recording=true

**.wlan[*].numInputHooks = 1
**.wlan[*].inputHook[*].typename="ThruputMeter"
**.wlan[*].inputHook[*].maxInterval = 1s
**.wlan[*].inputHook[*].batchSize = 10000
**.wlan[*].inputHook[*].**.vector-recording=true

**.wlan[*].numOutputHooks = 1
**.wlan[*].outputHook[*].typename="ThruputMeter"
**.wlan[*].outputHook[*].maxInterval = 1s
**.wlan[*].outputHook[*].batchSize = 10000
**.wlan[*].outputHook[*].**.vector-recording=true
**.vector-recording = false 

##########
## WLAN ##
##########

# NIC settings
**.mac.address = "auto"
**.mac.maxQueueSize = 14
**.mac.rtsThresholdBytes = 3000B
**.wlan[*].mac.retryLimit = 7
**.wlan[*].mac.cwMinData = 7
**.wlan[*].mac.cwMinMulticast = 31
**.opMode = "g"
**.mgmt.frameCapacity = 50

#Mobility
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 600m # Raum 400m^2  -> (20*20)m
**.constraintAreaMaxY = 400m
**.constraintAreaMaxZ = 0m

**.accessPoint.mobilityType ="StationaryMobility"
**.whostFTP.mobilityType = "StationaryMobility"
**.whttpStudents[*].mobilityType = "StationaryMobility"
**.whostVideoConf.mobilityType = "StationaryMobility"
##From Task "Students are uniformly distributed in a 400m2 area around the access point"
**.w*.mobility.initialX = uniform(15m, 35m) #uniformly distributed in 25m +/- 10m
**.w*.mobility.initialY = uniform(15m, 35m) #uniformly distributed in 25m +/- 10m
**.w*.mobility.initialZ = 0m

**.channelNumber = 0
**.mobility.initFromDisplayString = false
**.accessPoint.mobility.initialX = 25m #AccessPoint sitzt an den Kooridinaten, user in 400m2 area drumherum
**.accessPoint.mobility.initialY = 25m
**.accessPoint.mobility.initialZ = 0m

#########
## TCP ##
#########

**.tcpType = "TCP"
# TCPNewReno (Fast Retransmit and Fast Recovery)
**.tcp.tcpAlgorithmClass = "TCPNewReno"
#Advertised Window:---------------------------------------
#AWS (Advertised Window Size, Sendergröße) wird variabel angepasst und mit dem Empfänger abgeglichen um eine momentan ideale Datenrate zu finden.
#Der Empfänger "steuert" den Sender (drosselt/beschleunigt) durch Angabe der Größe des Senderfensters ("advertising the window size"), 
#AWS = Anzahl der Bytes die der Empfänger bereit ist zu empfangen 
##Client gibt in jedem tcp segment folgendes an den Sender zurück:
## AckNumber (AckFlag has to be set) : welches TCP Segement erwarte ich als nächstes
##Receive Window : Anzahl der Bytes die ich bereit bin zu speichern.
#flow control! 
#receive queue of WirelessHost * mss = advWindow. 
#Annahme: Receive Queue der empfänger wird sofort geleert. Daher size(advWin)=size(Receive queue)
**.tcp.advertisedWindow = 1000*1460
**.tcpApp[*].dataTransferMode = "object" # transmit cPacket objects (and subclasses) over a TCP connection  
#Die Maximum Transmission Unit (MTU; deutsch maximale Übertragungseinheit) beschreibt die maximale
# Paketgröße eines Protokolls der Vermittlungsschicht (Schicht 3) des OSI-Modells, gemessen in Oktetten, welche ohne Fragmentierung in den Rahmen (engl. "Frames")
# eines Netzes der Sicherungsschicht (Schicht 2) übertragen werden kann.
##MTU in Ethernet is 1500Byte -> Nutzdaten von TCP muss <1500Byte-TCPHeader - IPHeader.
**.tcp.mss =1460
**.tcp.windowScalingSupport = true

##Server
**.Server.numTcpApps = 2
**.Server.tcpApp[*].typename = "TCPGenericSrvApp"
**.Server.tcpApp[0].localPort = 80   # HTTP
**.Server.tcpApp[1].localPort = 20	 # FTP
**.Server.tcpApp[*].replyDelay = 0s

##Client
##HTTPClients - Surfing the Internet
**.whttpStudents[*].numTcpApps = 1
**.whttpStudents[*].tcpApp[*].typename ="TCPBasicClientApp"
**.whttpStudents[*].tcpApp[*].connectAddress ="Server" #Clients connect to symbolic Address
**.whttpStudents[*].tcpApp[*].connectPort =80 #Port to connect to
**.whttpStudents[*].tcpApp[*].localPort = -1  #wähle einen freien Port (nochmal nachgucken wo das steht)  
**.whttpStudents[*].tcpApp[*].numRequestsPerSession = 1 #(HTTP 1.0 click auf einer webseite)
**.whttpStudents[*].tcpApp[*].requestLength = 0B      #Length of the request sent.		   			
**.whttpStudents[*].tcpApp[*].startTime = exponential(15s)																
**.whttpStudents[*].tcpApp[*].thinkTime = 0s  #Time gap between requests (clicking, loading content)
**.whttpStudents[*].tcpApp[*].reconnectInterval = exponential(15s) #Falls connection broken, abwarten bis erneut versucht wird eine Verbindung aufzubauen
**.whttpStudents[*].tcpApp[*].stopTime = -1s         #Senden bis fertig.
##ParameterSheet - Group Specific Parameter
**.whttpStudents[*].tcpApp[*].idleInterval = exponential(15s)    #Time gap between sessions
**.whttpStudents[*].tcpApp[*].replyLength = exponential(0.789MiB)      #Reply length from tracefile10

##FTPClient - uploading File to Server
## FTP upload. Modelliert als Client der wiederholt Sessions zum Server aufbaut um ein Request a 1MB zu senden.
## "Upload is considered as one large file transfer lasting the whole simulation"
**.whostFTP.numTcpApps = 1
**.whostFTP.tcpApp[*].typename ="TCPBasicClientApp"
**.whostFTP.tcpApp[*].connectAddress ="Server"
**.whostFTP.tcpApp[*].connectPort = 20
**.whostFTP.tcpApp[*].localPort = -1
**.whostFTP.tcpApp[*].numRequestsPerSession = 1
**.whostFTP.tcpApp[*].requestLength = 1MiB      #Length of the request sent.		   			
**.whostFTP.tcpApp[*].startTime = 0s															
**.whostFTP.tcpApp[*].thinkTime = 0s  #Time gap between requests
**.whostFTP.tcpApp[*].reconnectInterval = 0s #Falls connection broken, abwarten bis erneut versucht wird eine Verbindung aufzubauen
**.whostFTP.tcpApp[*].stopTime = -1s         #Senden bis fertig.
**.whostFTP.tcpApp[*].idleInterval = 0s
**.whostFTP.tcpApp[*].replyLength = 0B
   

#########
## UDP ##
#########

##CCTVCamera  - StandardHostModul
**.CCTV.udpApp[*].typename = "UDPVideoStreamSvr"
**.CCTV.udpApp[*].localPort = 3088
**.CCTV.udpApp[*].sendInterval = 40ms
**.CCTV.udpApp[*].packetLen = 10KiB
##Wenn die Simulation 90 Min dauert, schickt die kamera ca 180000 packete à 10KiB
**.CCTV.udpApp[*].videoSize = 140000*10KiB    #5400000ms/40ms = 135000 packete, inkl. Puffer 140k

##CCTVMonitoring Host - StandardHost
**.ccTVMonitoringHost.udpApp[*].typename = "UDPVideoStreamCli"
**.ccTVMonitoringHost.udpApp[*].serverAddress = "CCTV"
**.ccTVMonitoringHost.udpApp[*].serverPort = 3088
**.ccTVMonitoringHost.udpApp[*].localPort = 9999
**.ccTVMonitoringHost.udpApp[*].startTime = uniform(0s, 40ms)

#  profLaptop
**.profLaptop.numUdpApps = 1
**.profLaptop.udpApp[*].typename = "UDPBasicApp"
**.profLaptop.udpApp[*].localPort = 5004
**.profLaptop.udpApp[*].destAddresses = "whostVideoConf"
**.profLaptop.udpApp[*].destPort = 5004
**.profLaptop.udpApp[*].sendInterval = 40ms
**.profLaptop.udpApp[*].messageLength = 1400B 	# 1388B video + 12B RTP header
**.profLaptop.udpApp[*].startTime = uniform(0s, 40ms)

#  whostVideoConf
**.whostVideoConf.numUdpApps = 1
**.whostVideoConf.udpApp[*].typename = "UDPBasicApp"
**.whostVideoConf.udpApp[*].localPort = 5004
**.whostVideoConf.udpApp[*].destAddresses = "profLaptop"
**.whostVideoConf.udpApp[*].destPort = 5004
**.whostVideoConf.udpApp[*].sendInterval = 40ms
**.whostVideoConf.udpApp[*].messageLength = 1400B 	# 1388B video + 12B RTP header
**.whostVideoConf.udpApp[*].startTime = uniform(0s, 40ms)

#####################
# RunConfigurations #
#####################

[Config _on0]
**.numHTTPHosts = 0
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off0]
**.numHTTPHosts = 0
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0


[Config _on1]
**.numHTTPHosts = 1
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off1]
**.numHTTPHosts = 1
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on2]
**.numHTTPHosts = 2
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off2]
**.numHTTPHosts = 2
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0




[Config _on3]
**.numHTTPHosts = 3
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off3]
**.numHTTPHosts = 3
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on4]
**.numHTTPHosts = 4
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off4]
**.numHTTPHosts = 4
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0


[Config _on5]
**.numHTTPHosts = 5
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off5]
**.numHTTPHosts = 5
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on6]
**.numHTTPHosts = 6
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off6]
**.numHTTPHosts = 6
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on7]
**.numHTTPHosts = 7
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off7]
**.numHTTPHosts = 7
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on8]
**.numHTTPHosts = 8
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off8]
**.numHTTPHosts = 8
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on9]
**.numHTTPHosts = 9
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off9]
**.numHTTPHosts = 9
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on10]
**.numHTTPHosts = 10
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off10]
**.numHTTPHosts = 10
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on11]
**.numHTTPHosts = 11
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off11]
**.numHTTPHosts = 11
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0


[Config _on12]
**.numHTTPHosts = 12
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off12]
**.numHTTPHosts = 12
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on13]
**.numHTTPHosts = 13
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off13]
**.numHTTPHosts = 13
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on14]
**.numHTTPHosts = 14
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off14]
**.numHTTPHosts = 14
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

[Config _on15]
**.numHTTPHosts = 15
**.CCTV.numUdpApps = 1
**.ccTVMonitoringHost.numUdpApps = 1
[Config _off15]
**.numHTTPHosts = 15
**.CCTV.numUdpApps = 0
**.ccTVMonitoringHost.numUdpApps = 0

result-dir=/utmnt/ut/si/sinp1070
